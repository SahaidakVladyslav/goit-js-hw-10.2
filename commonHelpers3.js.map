{"version":3,"file":"commonHelpers3.js","sources":["../src/js/03-promises.js"],"sourcesContent":["import iziToast from \"izitoast\";\n// import \"izitoast/dist/css/izitoast.min.css\";\n\n\nconst delayInputEl = document.querySelector('[name=\"delay\"]');\nconst stepInputEl = document.querySelector('[name=\"step\"]');\nconst amountInputEl = document.querySelector('[name=\"amount\"]');\nconst formEl = document.querySelector('.form');\nconst btnStart = document.querySelector('button[type=\"submit\"]');\nconst shouldResolve = Math.random() > 0.3;\nlet timerId = null;\nlet count = 0;\nlet timeDelay = 0;\nlet counterAmount = 0;\niziToast.settings({\n    timeout: 2000,\n    resetOnHover: true,\n    icon: 'material-icons',\n    transitionIn: 'flipInX',\n    transitionOut: 'flipOutX',\n    position: \"topRight\",\n});\n\nconst btnNone = () => {\n    btnStart.style.opacity = 0.5;\n    btnStart.style.pointerEvents = 'none';\n};\n\nconst btnAuto = () => {\n    btnStart.style.pointerEvents = 'auto';\n    btnStart.style.opacity = 1;\n};\n\n\nfunction createPromise(position, initialDelay, subsequentDelay) {\n    return new Promise((resolve, reject) => {\n        timeDelay = initialDelay;\n        counterAmount = 1\n        function finallyDesition() {\n            if (count !== 0) {\n                timerId = setInterval(() => {\n                    const shouldResolve = Math.random() > 0.3;\n\n                    counterAmount += 1\n                    timeDelay = +timeDelay + +subsequentDelay;\n                    if (shouldResolve) {\n                        iziToast.success({\n                            title: 'Success',\n                            message: `виклик зробився за такий час ${timeDelay} ms`,\n                        });\n                        console.log(`виклик зробився за такий час ${timeDelay}`)\n                    } else {\n                        iziToast.error({\n                            title: 'Error',\n                            message: `виклик зробився за такий час ${timeDelay} ms`,\n                        });\n                        console.log(`виклик зробився за такий час ${timeDelay}`)\n                    }\n                    count += 1;\n                    if (count >= position) {\n                        count = 0;\n                        formEl.reset();\n                        btnAuto()\n                        clearInterval(timerId);\n                    }\n                }, subsequentDelay)\n            }\n        }\n\n        function intervalFunction() {\n            if (count === 0) {\n                setTimeout(() => {\n                    const shouldResolve = Math.random() > 0.3;\n                    console.log(1)\n\n                    count += 1;\n                    if (shouldResolve) {\n                        iziToast.success({\n                            title: 'Success',\n                            message: `виклик зробився за такий час ${initialDelay} ms`,\n                        });\n                        console.log(`виклик зробився за такий час ${initialDelay} ms`)\n\n                        resolve(finallyDesition());\n                    } else {\n                        iziToast.error({\n                            title: 'Error',\n                            message: `виклик зробився за такий час ${initialDelay} ms`,\n                        });\n                        console.log(`виклик зробився за такий час ${initialDelay} ms`)\n\n                        reject(finallyDesition());\n                    }\n                }, initialDelay)\n            }\n        }\n        intervalFunction()\n    });\n}\n\nformEl.addEventListener('submit', (event) => {\n    event.preventDefault();\n    btnNone()\n    const amountStep = amountInputEl.value;\n    const initialDelay = delayInputEl.value;\n    const subsequentDelay = stepInputEl.value;\n\n    createPromise(amountStep, initialDelay, subsequentDelay)\n        .then((result) => {\n            console.log('Promise resolved:', result);\n        })\n        .catch((error) => {\n            console.log('Promise rejected:', error);\n        })\n});\n"],"names":["delayInputEl","stepInputEl","amountInputEl","formEl","btnStart","timerId","count","timeDelay","iziToast","btnNone","btnAuto","createPromise","position","initialDelay","subsequentDelay","resolve","reject","finallyDesition","shouldResolve","intervalFunction","event","amountStep","result","error"],"mappings":"wIAIA,MAAMA,EAAe,SAAS,cAAc,gBAAgB,EACtDC,EAAc,SAAS,cAAc,eAAe,EACpDC,EAAgB,SAAS,cAAc,iBAAiB,EACxDC,EAAS,SAAS,cAAc,OAAO,EACvCC,EAAW,SAAS,cAAc,uBAAuB,EAE/D,IAAIC,EAAU,KACVC,EAAQ,EACRC,EAAY,EAEhBC,EAAS,SAAS,CACd,QAAS,IACT,aAAc,GACd,KAAM,iBACN,aAAc,UACd,cAAe,WACf,SAAU,UACd,CAAC,EAED,MAAMC,EAAU,IAAM,CAClBL,EAAS,MAAM,QAAU,GACzBA,EAAS,MAAM,cAAgB,MACnC,EAEMM,EAAU,IAAM,CAClBN,EAAS,MAAM,cAAgB,OAC/BA,EAAS,MAAM,QAAU,CAC7B,EAGA,SAASO,EAAcC,EAAUC,EAAcC,EAAiB,CAC5D,OAAO,IAAI,QAAQ,CAACC,EAASC,IAAW,CACpCT,EAAYM,EAEZ,SAASI,GAAkB,CACnBX,IAAU,IACVD,EAAU,YAAY,IAAM,CACxB,MAAMa,EAAgB,KAAK,OAAM,EAAK,GAGtCX,EAAY,CAACA,GAAY,CAACO,EACtBI,GACAV,EAAS,QAAQ,CACb,MAAO,UACP,QAAS,gCAAgCD,CAAS,KAC9E,CAAyB,EACD,QAAQ,IAAI,gCAAgCA,CAAS,EAAE,IAEvDC,EAAS,MAAM,CACX,MAAO,QACP,QAAS,gCAAgCD,CAAS,KAC9E,CAAyB,EACD,QAAQ,IAAI,gCAAgCA,CAAS,EAAE,GAE3DD,GAAS,EACLA,GAASM,IACTN,EAAQ,EACRH,EAAO,MAAK,EACZO,EAAS,EACT,cAAcL,CAAO,EAE5B,EAAES,CAAe,EAEzB,CAED,SAASK,GAAmB,CACpBb,IAAU,GACV,WAAW,IAAM,CACb,MAAMY,EAAgB,KAAK,OAAM,EAAK,GACtC,QAAQ,IAAI,CAAC,EAEbZ,GAAS,EACLY,GACAV,EAAS,QAAQ,CACb,MAAO,UACP,QAAS,gCAAgCK,CAAY,KACjF,CAAyB,EACD,QAAQ,IAAI,gCAAgCA,CAAY,KAAK,EAE7DE,EAAQE,EAAe,CAAE,IAEzBT,EAAS,MAAM,CACX,MAAO,QACP,QAAS,gCAAgCK,CAAY,KACjF,CAAyB,EACD,QAAQ,IAAI,gCAAgCA,CAAY,KAAK,EAE7DG,EAAOC,EAAe,CAAE,EAE/B,EAAEJ,CAAY,CAEtB,CACDM,EAAkB,CAC1B,CAAK,CACL,CAEAhB,EAAO,iBAAiB,SAAWiB,GAAU,CACzCA,EAAM,eAAc,EACpBX,EAAS,EACT,MAAMY,EAAanB,EAAc,MAC3BW,EAAeb,EAAa,MAC5Bc,EAAkBb,EAAY,MAEpCU,EAAcU,EAAYR,EAAcC,CAAe,EAClD,KAAMQ,GAAW,CACd,QAAQ,IAAI,oBAAqBA,CAAM,CACnD,CAAS,EACA,MAAOC,GAAU,CACd,QAAQ,IAAI,oBAAqBA,CAAK,CAClD,CAAS,CACT,CAAC"}