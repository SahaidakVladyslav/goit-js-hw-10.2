{"version":3,"file":"commonHelpers3.js","sources":["../src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nimport flatpickr from \"flatpickr\";\nimport { Report } from 'notiflix/build/notiflix-report-aio';\nimport { Confirm } from 'notiflix/build/notiflix-confirm-aio';\n\nconst delayInputEl = document.querySelector('[name=\"delay\"]');\nconst stepInputEl = document.querySelector('[name=\"step\"]');\nconst amountInputEl = document.querySelector('[name=\"amount\"]');\nconst formEl = document.querySelector('.form');\nconst btnStart = document.querySelector('button[type=\"submit\"]');\nconst shouldResolve = Math.random() > 0.3;\nlet timerId = null;\nlet count = 0;\nlet timeDelay = 0;\nlet counterAmount = 0;\n\nconst btnNone = () => {\n    btnStart.style.opacity = 0.5;\n    btnStart.style.pointerEvents = 'none';\n};\n\nconst btnAuto = () => {\n    btnStart.style.pointerEvents = 'auto';\n    btnStart.style.opacity = 1;\n};\n\n\nfunction createPromise(position, initialDelay, subsequentDelay) {\n    return new Promise((resolve, reject) => {\n        timeDelay = initialDelay;\n        counterAmount = 1\n        function finallyDesition() {\n            if (count !== 0) {\n                timerId = setInterval(() => {\n                    const shouldResolve = Math.random() > 0.3;\n\n                    counterAmount += 1\n                    timeDelay = +timeDelay + +subsequentDelay;\n                    if (shouldResolve) {\n                        Notiflix.Notify.failure(\n                            `❌ Rejected promise ${counterAmount} in ${timeDelay}ms`\n                        );\n                        console.log(`виклик зробився за такий час ${timeDelay}`)\n                    } else {\n                        Notiflix.Notify.success(\n                            `✅ Fulfilled promise ${counterAmount} in ${timeDelay}ms`\n                        );\n                        console.log(`виклик зробився за такий час ${timeDelay}`)\n                    }\n                    count += 1;\n                    if (count >= position) {\n                        count = 0;\n                        formEl.reset();\n                        btnAuto()\n                        clearInterval(timerId);\n                    }\n                }, subsequentDelay)\n            }\n        }\n\n\n        function intervalFunction() {\n            if (count === 0) {\n                setTimeout(() => {\n                    const shouldResolve = Math.random() > 0.3;\n\n                    count += 1;\n                    if (shouldResolve) {\n                        Notiflix.Notify.success(\n                            `✅ Fulfilled promise ${counterAmount} in ${initialDelay}ms`\n                        );\n                        console.log(`виклик зробився за такий час ${initialDelay}`)\n                        finallyDesition()\n                        resolve('To praca!');\n                    } else {\n                        Notiflix.Notify.failure(\n                            `❌ Rejected promise ${counterAmount} in ${initialDelay}ms`\n                        );\n                        console.log(`виклик зробився за такий час ${initialDelay}`)\n                        finallyDesition()\n                        reject('To NE praca!');\n                    }\n                }, initialDelay)\n            }\n        }\n        intervalFunction()\n    });\n}\n\nformEl.addEventListener('submit', (event) => {\n    event.preventDefault();\n    btnNone()\n    const amountStep = amountInputEl.value;\n    const initialDelay = delayInputEl.value;\n    const subsequentDelay = stepInputEl.value;\n\n    createPromise(amountStep, initialDelay, subsequentDelay)\n        .then((result) => {\n            console.log('Promise resolved:', result);\n        })\n        .catch((error) => {\n            console.log('Promise rejected:', error);\n        })\n});\n\nconsole.log()"],"names":["delayInputEl","stepInputEl","amountInputEl","formEl","btnStart","timerId","count","timeDelay","counterAmount","btnNone","btnAuto","createPromise","position","initialDelay","subsequentDelay","resolve","reject","finallyDesition","shouldResolve","Notiflix","intervalFunction","event","amountStep","result","error"],"mappings":"wIAKA,MAAMA,EAAe,SAAS,cAAc,gBAAgB,EACtDC,EAAc,SAAS,cAAc,eAAe,EACpDC,EAAgB,SAAS,cAAc,iBAAiB,EACxDC,EAAS,SAAS,cAAc,OAAO,EACvCC,EAAW,SAAS,cAAc,uBAAuB,EAE/D,IAAIC,EAAU,KACVC,EAAQ,EACRC,EAAY,EACZC,EAAgB,EAEpB,MAAMC,EAAU,IAAM,CAClBL,EAAS,MAAM,QAAU,GACzBA,EAAS,MAAM,cAAgB,MACnC,EAEMM,EAAU,IAAM,CAClBN,EAAS,MAAM,cAAgB,OAC/BA,EAAS,MAAM,QAAU,CAC7B,EAGA,SAASO,EAAcC,EAAUC,EAAcC,EAAiB,CAC5D,OAAO,IAAI,QAAQ,CAACC,EAASC,IAAW,CACpCT,EAAYM,EACZL,EAAgB,EAChB,SAASS,GAAkB,CACnBX,IAAU,IACVD,EAAU,YAAY,IAAM,CACxB,MAAMa,EAAgB,KAAK,OAAM,EAAK,GAEtCV,GAAiB,EACjBD,EAAY,CAACA,GAAY,CAACO,EACtBI,GACAC,EAAS,OAAO,QACZ,sBAAsBX,QAAoBD,KACtE,EACwB,QAAQ,IAAI,gCAAgCA,GAAW,IAEvDY,EAAS,OAAO,QACZ,uBAAuBX,QAAoBD,KACvE,EACwB,QAAQ,IAAI,gCAAgCA,GAAW,GAE3DD,GAAS,EACLA,GAASM,IACTN,EAAQ,EACRH,EAAO,MAAK,EACZO,EAAS,EACT,cAAcL,CAAO,EAE5B,EAAES,CAAe,EAEzB,CAGD,SAASM,GAAmB,CACpBd,IAAU,GACV,WAAW,IAAM,CACb,MAAMY,EAAgB,KAAK,OAAM,EAAK,GAEtCZ,GAAS,EACLY,GACAC,EAAS,OAAO,QACZ,uBAAuBX,QAAoBK,KACvE,EACwB,QAAQ,IAAI,gCAAgCA,GAAc,EAC1DI,EAAiB,EACjBF,EAAQ,WAAW,IAEnBI,EAAS,OAAO,QACZ,sBAAsBX,QAAoBK,KACtE,EACwB,QAAQ,IAAI,gCAAgCA,GAAc,EAC1DI,EAAiB,EACjBD,EAAO,cAAc,EAE5B,EAAEH,CAAY,CAEtB,CACDO,EAAkB,CAC1B,CAAK,CACL,CAEAjB,EAAO,iBAAiB,SAAWkB,GAAU,CACzCA,EAAM,eAAc,EACpBZ,EAAS,EACT,MAAMa,EAAapB,EAAc,MAC3BW,EAAeb,EAAa,MAC5Bc,EAAkBb,EAAY,MAEpCU,EAAcW,EAAYT,EAAcC,CAAe,EAClD,KAAMS,GAAW,CACd,QAAQ,IAAI,oBAAqBA,CAAM,CACnD,CAAS,EACA,MAAOC,GAAU,CACd,QAAQ,IAAI,oBAAqBA,CAAK,CAClD,CAAS,CACT,CAAC,EAED,QAAQ,IAAG"}